<?xml version="1.0"?>

<!-- MAVLink v1.0 Message IDs from free IDs in range 180 to 229 -->
<!-- MAVLink v1.0 Command IDs from free IDs in range 12000 to 12999 -->

<mavlink>

    <include>ardupilotmega.xml</include>

    <dialect>8</dialect>

    <enums>
      <enum name="SENDER_ID">
        <description>Hello World message sender type</description>
        <entry value="0" name="SENDER_ID_GCS">
          <description>GCS is the sender</description>
        </entry>
        <entry value="1" name="SENDER_ID_RPI">
          <description>RPI is the sender</description>
        </entry>
      </enum>
      <enum name="RESCUE_STATE">
        <description>The state of the rescue code that whether it is active or not.</description>
        <entry value="0" name="RESCUE_DISABLED">
          <description>Rescue code is disabled.</description>
        </entry>
        <entry value="1" name="RESCUE_ENABLED">
          <description>Rescue code is enabled.</description>
        </entry>
      </enum>

      <enum name="FUNNYWING_CUSTOM_CMD">
        <description>IDs of the custom commands for funnywing system.</description>
        <entry value="0" name="SET_SIMPLE_TRACKER_SETTINGS">
          <description>Sets the settings like virtual offset and virtual center for the simple tracker algorithm.</description>
        </entry>
        <entry value="1" name="SET_SIMPLE_TRACKER_ACTIVATION">
          <description>Active and deactive the simple tracker algorithm on the RPI side.</description>
        </entry>
        <entry value="2" name="SET_TEST_SCENARIO_ACTIVATION">
          <description>Active and deactive the test scenario code on the RPI side.</description>
        </entry>
        <entry value="3" name="SET_CAMERA_PRESET_INDEX">
          <description>Changes the camera settings(usually, zoom and focus) to the values specified in the preset index of the camera preset table. In the funnywing project this index considered to be an integer value with [0-100] range.</description>
        </entry>
      </enum>

      <!-- <enum name="MAV_CMD">
        <description>Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries</description>
        <entry value="12000" name="RESCUE_SET_STATE" hasLocation="false" isDestination="false">
          <description>Sets the states of the rescue code, dis/enabled.</description>
          <param index="1" label="rescue_state" enum="RESCUE_STATE" default="RESCUE_DISABLED">The state must be set in the RPI side.</param>
          <param index="2">Empty</param>
          <param index="3">Empty</param>
          <param index="4">Empty</param>
          <param index="5">Empty</param>
          <param index="6">Empty</param>
          <param index="7">Empty</param>
        </entry>
      </enum> -->
    </enums>

    <messages>
      <message id="187" name="HELLO_WORLD">
        <description>Hello World message</description>
        <field type="uint8_t" name="sender_id" enum="SENDER_ID">sender id</field>
        <field type="char[10]" name="sender_name">sender name</field>
        <field type="uint32_t" name="sequence">the sequence of the message</field>
      </message>
      <message id="188" name="COMMAND_RESPONSE">
        <description>Message for sending command results back from the RPI, Inspired by COMMAND_ACK</description>
        <field type="uint16_t" name="command">ID of the command to be responsed.</field>
        <field type="uint8_t" name="result" enum="MAV_RESULT">Result of the command execution.</field>
        <field type="uint8_t" name="progress">Percentage of the execution of commands taking noticable time.</field>
        <field type="uint8_t" name="target_system">ID of the system to send message</field>
        <field type="uint8_t" name="target_component">ID of the component to send message</field>
        <field type="uint16_t" name="request_number">A number to assign the command and its response to eachother</field>
      </message>
      <message id="189" name="VIRTUAL_TARGET_GLOBAL_POSITION_INT">
        <description>The global position of the virtual target in funnywing simpleTracker.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.</field>
        <field type="uint8_t" name="coordinate_frame" enum="MAV_FRAME">Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11</field>
        <field type="uint16_t" name="type_mask" enum="POSITION_TARGET_TYPEMASK" display="bitmask">Bitmap to indicate which dimensions should be ignored by the vehicle.</field>
        <field type="int32_t" name="lat_int" units="degE7">X Position in WGS84 frame</field>
        <field type="int32_t" name="lon_int" units="degE7">Y Position in WGS84 frame</field>
        <field type="float" name="alt" units="m">Altitude (MSL, AGL or relative to home altitude, depending on frame)</field>
        <field type="float" name="vx" units="m/s">X velocity in NED frame</field>
        <field type="float" name="vy" units="m/s">Y velocity in NED frame</field>
        <field type="float" name="vz" units="m/s">Z velocity in NED frame</field>
      </message>
      <message id="190" name="RESCUE_STATUS">
        <description>A message for sending information to GCS about whether the rescue system is active or not.</description>
        <field type="uint8_t" name="rescue_state" enum="RESCUE_STATE">This field is used in monitoring to find that whether the rescue code is enabled or disabled.</field>
      </message>
      <message id="196" name="RESCUE_SET_STATE">
        <description>Sets the states of the rescue code, dis/enabled. not defined in commands, since it the job defined in the RfConnection library of funnywing sends commands automatically to the autopilot and changing that code makes it complex. So defined in messages.</description>
        <field type="uint8_t" name="rescue_state" enum="RESCUE_STATE">The state must be set in the RPI side.</field>
      </message>
      <message id="197" name="FUNNYWING_CUSTOM_COMMAND">
        <description>A message for sending funnywing custom commands, specially from GUI to the RPI side. This is for turning around the limiting of mavlink1 message ids and the fact that COMMAND_LONG/INT's jobs are preventing from using custom commands(actually commands are automatically sent to the autopilot and so we can't use them.).</description>
        <field type="uint8_t" name="target_system">System which should execute the command</field>
        <field type="uint8_t" name="target_component">Component which should execute the command, 0 for all components</field>
        <field type="uint16_t" name="command" enum="FUNNYWING_CUSTOM_CMD">Command ID (of custom command to send).</field>
        <field type="int32_t[5]" name="int_params">List of integer parameters of the command.</field>
        <field type="uint8_t[5]" name="bool_params">List of boolean parameters of the command.</field>
        <field type="float[5]" name="float_params">List of float parameters of the command.</field>
      </message>
    </messages>

</mavlink>



